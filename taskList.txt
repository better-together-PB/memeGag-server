L. Backend
1 Authentication
  [x] 2. Models
    [x] a) User
            [x]-email
            [x]-password
            [x]-name
          [x]-posts
          [x]-likes
          [x]-comments
          [x]-userImage
    [x] b) Post
            [x]-title
          [x] -image link
          [x]-userId
        [x]  -tags enum[humor, dark humor, programming, comic, gaming, sports, animals]
        [x]  -createdAt
    [x] c) Comment
            [x]- userId
            [x]- postId
            [x]- comment
          [x]- likes: [{
      type: ObjectId,
      ref. User
            }]
          [x]-createdAt
    [x] d) Likes
            [x] - userId
            [x] - postId
3. Routes
  - "/" page with posts
  - "/interest/:tag"

                          POST  [x]- "/signup" *Anon
                          POST  [x]- "/login" *Anon 
                          GET   [x]- "/verify" 

                          GET   [x]- "/user/:id"
                          GET   [x]- "/user/:id/:section"


                          POST   [x]  "/post/create" *PROTECTED 
                          GET    [x]- "/post/:id"
                          DELETE [x] "/post/:id" 
                          PATCH  [x]  "/post/:id"

                          POST   [x]- "/post/:postId/comment"
                          POST   [x]- "/post/:postId/:commentId/like"
                          DELETE [x]- "/post/:postId/:commentId"

PUT "/post//:postId/like" like or unlike comment // Remove the userID from likes array if already liked








// Check validity of past Id's
if (!mongoose.Types.ObjectId.isValid(projectId)) {
    res.status(400).json({ message: 'Specified id is not valid' });
    return;
  }
Ask Luis/chatgpt where to catch the invalid Id
